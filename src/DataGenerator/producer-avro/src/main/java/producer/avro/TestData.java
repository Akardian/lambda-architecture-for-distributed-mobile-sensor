/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package producer.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TestData extends org.apache.avro.specific.SpecificRecordBase {
  private static final long serialVersionUID = -8150466757757616806L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestData\",\"namespace\":\"producer.avro\",\"fields\":[{\"name\":\"sendereName\",\"type\":\"string\",\"doc\":\"Name of the sender\"},{\"name\":\"senderType\",\"type\":\"string\",\"doc\":\"Type ot the sender\"},{\"name\":\"message\",\"type\":\"string\",\"doc\":\"Type ot the sender\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestData> ENCODER =
      new BinaryMessageEncoder<TestData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestData> DECODER =
      new BinaryMessageDecoder<TestData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TestData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TestData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TestData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TestData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TestData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TestData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TestData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the sender */
   private java.lang.CharSequence sendereName;
  /** Type ot the sender */
   private java.lang.CharSequence senderType;
  /** Type ot the sender */
   private java.lang.CharSequence message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestData() {}

  /**
   * All-args constructor.
   * @param sendereName Name of the sender
   * @param senderType Type ot the sender
   * @param message Type ot the sender
   */
  public TestData(java.lang.CharSequence sendereName, java.lang.CharSequence senderType, java.lang.CharSequence message) {
    this.sendereName = sendereName;
    this.senderType = senderType;
    this.message = message;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sendereName;
    case 1: return senderType;
    case 2: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sendereName = (java.lang.CharSequence)value$; break;
    case 1: senderType = (java.lang.CharSequence)value$; break;
    case 2: message = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sendereName' field.
   * @return Name of the sender
   */
  public java.lang.CharSequence getSendereName() {
    return sendereName;
  }


  /**
   * Sets the value of the 'sendereName' field.
   * Name of the sender
   * @param value the value to set.
   */
  public void setSendereName(java.lang.CharSequence value) {
    this.sendereName = value;
  }

  /**
   * Gets the value of the 'senderType' field.
   * @return Type ot the sender
   */
  public java.lang.CharSequence getSenderType() {
    return senderType;
  }


  /**
   * Sets the value of the 'senderType' field.
   * Type ot the sender
   * @param value the value to set.
   */
  public void setSenderType(java.lang.CharSequence value) {
    this.senderType = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return Type ot the sender
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * Type ot the sender
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Creates a new TestData RecordBuilder.
   * @return A new TestData RecordBuilder
   */
  public static producer.avro.TestData.Builder newBuilder() {
    return new producer.avro.TestData.Builder();
  }

  /**
   * Creates a new TestData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestData RecordBuilder
   */
  public static producer.avro.TestData.Builder newBuilder(producer.avro.TestData.Builder other) {
    if (other == null) {
      return new producer.avro.TestData.Builder();
    } else {
      return new producer.avro.TestData.Builder(other);
    }
  }

  /**
   * Creates a new TestData RecordBuilder by copying an existing TestData instance.
   * @param other The existing instance to copy.
   * @return A new TestData RecordBuilder
   */
  public static producer.avro.TestData.Builder newBuilder(producer.avro.TestData other) {
    if (other == null) {
      return new producer.avro.TestData.Builder();
    } else {
      return new producer.avro.TestData.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestData>
    {

    /** Name of the sender */
    private java.lang.CharSequence sendereName;
    /** Type ot the sender */
    private java.lang.CharSequence senderType;
    /** Type ot the sender */
    private java.lang.CharSequence message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(producer.avro.TestData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sendereName)) {
        this.sendereName = data().deepCopy(fields()[0].schema(), other.sendereName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.senderType)) {
        this.senderType = data().deepCopy(fields()[1].schema(), other.senderType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing TestData instance
     * @param other The existing instance to copy.
     */
    private Builder(producer.avro.TestData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sendereName)) {
        this.sendereName = data().deepCopy(fields()[0].schema(), other.sendereName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.senderType)) {
        this.senderType = data().deepCopy(fields()[1].schema(), other.senderType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'sendereName' field.
      * Name of the sender
      * @return The value.
      */
    public java.lang.CharSequence getSendereName() {
      return sendereName;
    }


    /**
      * Sets the value of the 'sendereName' field.
      * Name of the sender
      * @param value The value of 'sendereName'.
      * @return This builder.
      */
    public producer.avro.TestData.Builder setSendereName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sendereName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sendereName' field has been set.
      * Name of the sender
      * @return True if the 'sendereName' field has been set, false otherwise.
      */
    public boolean hasSendereName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sendereName' field.
      * Name of the sender
      * @return This builder.
      */
    public producer.avro.TestData.Builder clearSendereName() {
      sendereName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderType' field.
      * Type ot the sender
      * @return The value.
      */
    public java.lang.CharSequence getSenderType() {
      return senderType;
    }


    /**
      * Sets the value of the 'senderType' field.
      * Type ot the sender
      * @param value The value of 'senderType'.
      * @return This builder.
      */
    public producer.avro.TestData.Builder setSenderType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.senderType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'senderType' field has been set.
      * Type ot the sender
      * @return True if the 'senderType' field has been set, false otherwise.
      */
    public boolean hasSenderType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'senderType' field.
      * Type ot the sender
      * @return This builder.
      */
    public producer.avro.TestData.Builder clearSenderType() {
      senderType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * Type ot the sender
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * Type ot the sender
      * @param value The value of 'message'.
      * @return This builder.
      */
    public producer.avro.TestData.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * Type ot the sender
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * Type ot the sender
      * @return This builder.
      */
    public producer.avro.TestData.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TestData build() {
      try {
        TestData record = new TestData();
        record.sendereName = fieldSetFlags()[0] ? this.sendereName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.senderType = fieldSetFlags()[1] ? this.senderType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestData>
    READER$ = (org.apache.avro.io.DatumReader<TestData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sendereName);

    out.writeString(this.senderType);

    out.writeString(this.message);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sendereName = in.readString(this.sendereName instanceof Utf8 ? (Utf8)this.sendereName : null);

      this.senderType = in.readString(this.senderType instanceof Utf8 ? (Utf8)this.senderType : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sendereName = in.readString(this.sendereName instanceof Utf8 ? (Utf8)this.sendereName : null);
          break;

        case 1:
          this.senderType = in.readString(this.senderType instanceof Utf8 ? (Utf8)this.senderType : null);
          break;

        case 2:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










