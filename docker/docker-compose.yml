version: "3.7"

services:

##### Monitoring
    portainer-agent:
        image: portainer/agent
        networks:
            - lambda-network
        volumes:
            - type: bind
              source: /var/run/docker.sock
              target: /var/run/docker.sock
            - type: bind
              source: /var/lib/docker/volumes
              target: /var/lib/docker/volumes
        deploy:
            mode: global
            placement:
                constraints: [node.platform.os == linux]

    portainer:
        image: portainer/portainer
        command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify
        ports: 
            - target: 9000
              published: 8010
              mode: ingress
            - target: 8000
              published: 8020
              mode: ingress
        networks:
            - lambda-network
        volumes: 
            - type: volume
              source: portainer-persistence
              target: /data
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    kafdrop:
        image: obsidiandynamics/kafdrop:3.26.0
        ports:
            - target: 9000
              published: 8000
              protocol: tcp
              mode: ingress
        networks:
            - lambda-network
        environment:
            KAFKA_BROKERCONNECT: "kafka-01:9092"
            JVM_OPTS: "-Xms32M -Xmx64M"
            SERVER_SERVLET_CONTEXTPATH: "/"       

##### Kafka
    zookeeper-01:
        image: bitnami/zookeeper:3.6.1
        ports:
            - target: 2181
              published: 2181
              protocol: tcp
              mode: ingress
        networks:
            - lambda-network
        volumes:
            - type: volume
              source: zookeeper-persistence
              target: /bitnami/zookeeper/
        environment:
            ZOO_PORT_NUMBER: 2181
            ZOO_SERVER_ID: 1
            ZOO_SERVERS: "server.1=0.0.0.0:2888:3888"
            ALLOW_ANONYMOUS_LOGIN: "yes"
            
    kafka-01:
        image: bitnami/kafka:2.5.0
        ports:
            - target: 9092
              published: 9092
              protocol: tcp
              mode: ingress
            - target: 29092
              published: 29092
              protocol: tcp
              mode: ingress
        networks:
            - lambda-network
        volumes:
            - type: volume
              source: kafka-persistence
              target: /bitnami/kafka/
        environment: # PLAINTEXT_HOST needs to be Docker Host IP/Hostname (TODO: Set constrain)
            KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper-01:2181"
            ALLOW_PLAINTEXT_LISTENER: "yes"
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,PLAINTEXT_HOST://:29092"
            KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-01:9092,PLAINTEXT_HOST://192.168.80.113:29092"

##### Hadoop
# https://github.com/big-data-europe/docker-hadoop

    hadoop-namenode:
        image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
        ports:
            - target: 9870
              published: 9870
              protocol: tcp
              mode: ingress
        networks:
            - lambda-network
        volumes:
            - type: volume
              source: namenode
              target: /hadoop/dfs/name
        environment:
            - CLUSTER_NAME=lambda_hadoop
        env_file:
            - ./hadoop.env
        deploy:
            mode: replicated
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manager]  # No need to be on the manager (node.hostname == ???)
            labels:
                traefik.docker.network: lambda-network
                traefik.port: 50070
                
    hadoop-datanode:
        image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
        networks:
            - lambda-network
        ports:
            - target: 9864
              published: 9864
              protocol: tcp
              mode: ingress
        volumes:
            - type: volume
              source: datanode
              target: /hadoop/dfs/data
        env_file:
          - ./hadoop.env
        environment:
          SERVICE_PRECONDITION: "hadoop-namenode:50070"
        deploy:
            mode: global
            restart_policy:
                condition: on-failure
        labels:
            traefik.docker.network: lambda-network
            traefik.port: 50075
            
##### Spark
# https://github.com/bitnami/bitnami-docker-spark

    spark-master:
        image: bitnami/spark:2.4.5
        networks:
            - lambda-network
        ports:
            - target: 8080
              published: 8080
              protocol: tcp
              mode: ingress
        environment:
            SPARK_MODE: "master"
            SPARK_RPC_AUTHENTICATION_ENABLED: "no"
            SPARK_RPC_ENCRYPTION_ENABLED: "no"
            SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
            SPARK_SSL_ENABLED: "no"
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]  # No need to be on the manager (node.hostname == ???)
                
    spark-worker:
        image: bitnami/spark:2.4.5
        networks:
            - lambda-network
        environment:
            SPARK_MODE: "worker"
            SPARK_MASTER_URL: "spark://spark-master:7077"
            SPARK_WORKER_MEMORY: "1G"
            SPARK_WORKER_CORES: "1"
            SPARK_RPC_AUTHENTICATION_ENABLED: "no"
            SPARK_RPC_ENCRYPTION_ENABLED: "no"
            SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
            SPARK_SSL_ENABLED: "no"
        deploy:
            mode: replicated
            replicas: 1
                           
volumes:
# Monitoring
    portainer-persistence:
# Kafka
    zookeeper-persistence:
    kafka-persistence:
# Hadoop
    namenode:
    datanode:    
  
networks:
    lambda-network:
        name: lambda_network
        driver: overlay